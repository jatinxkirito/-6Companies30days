/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
    void fn(int st,int en,MountainArray &m,int target,int &in)
    {
        if(st>en)
        return;
        int mid=(st+en)/2;
        int val=m.get(mid);
        if(val==target)
        {
            in=min(in,mid);
            cout<<in<<endl;
            fn(st,mid-1,m,target,in);
           return;
        }
         if(target<val)
        {
            int v1=(st+mid-1)/2;
            v1=m.get(v1);
             int v2=(mid+en+1)/2;
            v2=m.get(v2);
            
            if(v1<=val)
            fn(st,mid-1,m,target,in);
           if(v2<=val)
           fn(mid+1,en,m,target,in);
            else
            fn(mid+1,en,m,target,in);
        }
        else
        {
             int v1=(st+mid-1)/2;
            v1=m.get(v1);
            int v2=(mid+en+1)/2;
            v2=m.get(v2);
            if(v1>=val)
            fn(st,mid-1,m,target,in);
           if(v2>=val)
           fn(mid+1,en,m,target,in);
            else
            fn(mid+1,en,m,target,in);
        }
    }
public:
    int findInMountainArray(int target, MountainArray &A) {
        
      int n = A.length(), l, r, m, peak = 0;
        l  = 0;
        r = n - 1;
        while (l < r) {
            m = (l + r) / 2;
            if (A.get(m) < A.get(m + 1))
                l = peak = m + 1;
            else
                r = m;
        }
        l = 0;
        r = peak;
        while (l <= r) {
            m = (l + r) / 2;
            if (A.get(m) < target)
                l = m + 1;
            else if (A.get(m) > target)
                r = m - 1;
            else
                return m;
        }
        l = peak;
        r = n - 1;
        while (l <= r) {
            m = (l + r) / 2;
            if (A.get(m) > target)
                l = m + 1;
            else if (A.get(m) < target)
                r = m - 1;
            else
                return m;
        }
        return -1;
    }
    
};
