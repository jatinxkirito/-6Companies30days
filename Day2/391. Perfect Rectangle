class Solution {
public:
    bool isRectangleCover(vector<vector<int>>& a) {
        long long int ar=0;
        map<pair<long long int,long long int>, int> cnt;
        map<vector<int>, int> bkc;
        long long int f=0;
        for(auto i: a)
        {
            if(bkc[i])
            {f=1;continue;}
            bkc[i]=1;
            long long int x1,y1,x2,y2;
            x1=i[0];
            y1=i[1];
            x2=i[2];
            y2=i[3];
            ar+=(x2-x1)*(y2-y1);
            cnt[{x1,y1}]++;
            cnt[{x2,y2}]++;
            cnt[{x1,y2}]++;
            cnt[{x2,y1}]++;
        }
        long long int c=0;
        if(f)
        return 0;
        map<long long int,long long int> xk,yk;
        vector<pair<long long int,long long int>> ty;
        for(auto i: cnt)
        {
            if(i.second==1)
            { 
                ty.push_back(i.first);
                xk[i.first.first]++;
                yk[i.first.second]++;
                ++c;
            }
        }
        if(c!=4)
        return 0;
        else
        {
            
            for(auto i: ty)
            {
                cout<<i.first<<" "<<i.second<<endl;
            }
            if(xk.size()!=2||yk.size()!=2)
            return 0;
            vector<long long int> xw(2),yw(2);
            long long int j=0;
            for(auto i: xk)
            {
                xw[j]=i.first;
                ++j;
                if(i.second!=2)
                return 0;
            }
            j=0;
            for(auto i: yk)
            {
                 yw[j]=i.first;
                ++j;
                if(i.second!=2)
                return 0;
            }
            if(ar!=abs(xw[0]-xw[1])*abs(yw[0]-yw[1]))
            return 0;
        }
        return 1;
        
    }
};
