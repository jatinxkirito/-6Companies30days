class Solution {
    void st(vector<int> &cur,vector<int> &tt,vector<int> &nums,int i,int su,int re,int n,int ele)
    {
        if(su==re)
        {
            if(ele!=0)
            tt.push_back(ele);
            return;
        }
        if(i==n)
        return;
        int tem=1<<i;
        st(cur,tt,nums,i+1,su+nums[i],re,n,ele+tem);
        st(cur,tt,nums,i+1,su,re,n,ele);

    }
    void tv(int i,vector<int> &tt,vector<int> &mar,int cnt,bool &tr,int n,int cur)
    {
        if(tr)
        return;
        if(cnt==0)
        {
            tr=1;
            return;
        }
        if(i==tt.size())
        return;
        int fl=1; 
        tv(i+1,tt,mar,cnt,tr,n,cur);
        // vector<int> te(n);
        // for(int i=0;i<n;i++)
        // te[i]=mar[i];
        //  for(int j=0;j<tt[i].size();j++)
        // {
             
        //     if(mar[tt[i][j]]==1)
        //     {
        //         fl=0;
        //     }
        //     else
        //     mar[tt[i][j]]=1;
        // }
        if((cur&tt[i])==0)
        tv(i+1,tt,mar,cnt-1,tr,n,(cur|tt[i]));
        
        
    }
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int su=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        su+=nums[i];
        if(su%k)
        return false;
        vector<int> cur;
        int re=su/k;
        vector<int> tt;
        st(cur,tt,nums,0,0,re,n,0);
        if(tt.size()<k)
        return false;
        vector<int> mrk(n);
        bool fl=0;
        tv(0,tt,mrk,k,fl,n,0);
        return fl;
    }
};
